import 'dart:async';
import 'dart:developer';
import 'dart:math' as math;

import 'package:agora_rtc_engine/rtc_engine.dart';
import 'package:agora_rtc_engine/rtc_local_view.dart' as RtcLocalView;
import 'package:agora_rtc_engine/rtc_remote_view.dart' as RtcRemoteView;
import 'package:agora_rtm/agora_rtm.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:get/get.dart';
import 'package:hotlinecafee/ViewModel/brodcast_controller.dart';

import '../../Preference/preference.dart';

class User {
  String? username;
  String? image;
  String? name;

  User({this.username, this.name, this.image});
}

class Message {
  String? message;
  String? type;
  String? user;
  String? image;

  Message({this.message, this.type, this.user, this.image});
}

import 'dart:async';
import 'dart:developer';
import 'dart:math' as math;

import 'package:agora_rtc_engine/rtc_engine.dart';
import 'package:agora_rtc_engine/rtc_local_view.dart' as RtcLocalView;
import 'package:agora_rtc_engine/rtc_remote_view.dart' as RtcRemoteView;
import 'package:agora_rtm/agora_rtm.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:get/get.dart';
import 'package:hotlinecafee/Preference/preference.dart';
import 'package:hotlinecafee/ViewModel/brodcast_controller.dart';
import 'package:hotlinecafee/ViewModel/home_view_model.dart';
import 'package:hotlinecafee/ViewModel/vs_view_model.dart';
import 'package:hotlinecafee/common/loading.dart';
import 'package:hotlinecafee/common/snackbar.dart';
import 'package:hotlinecafee/model/apis/api_response.dart';
import 'package:hotlinecafee/model/response_model/stop_live_stream_res_model.dart';

class HostLivePage extends StatefulWidget {
  /// non-modifiable channel name of the page
  final String? channelName;
  final String? channelToken;
  final int? channelId;
  final String? image;
  final time;
  final switchCamera;

  /// Creates a call page with given channel name.
  const HostLivePage(
      {Key? key,
      this.channelName,
      this.time,
      this.image,
      this.channelToken,
      this.channelId,
      this.switchCamera})
      : super(key: key);

  @override
  _HostLivePageState createState() => _HostLivePageState();
}

class _HostLivePageState extends State<HostLivePage> {
  CountController countController = Get.put(CountController());
  HomeViewModel stopLiveStreamViewModel = Get.find();
  VSLiveViewModel vsLiveViewModel = Get.put(VSLiveViewModel());

  static final _users = <int>[];
  String? channelName;
  List<Users>? userList = [];
  bool _isLogin = true;
  bool _isInChannel = true;
  int userNo = 0;
  var userMap;
  var tryingToEnd = false;
  bool personBool = false;
  bool accepted = false;

  final _channelMessageController = TextEditingController();

  final _infoStrings = <Message>[];

  AgoraRtmClient? _client;
  AgoraRtmChannel? _channel;
  bool heart = false;
  bool anyPerson = false;
  bool isStickerShow = false;

  //Love animation
  final _random = math.Random();
  Timer? _timer;
  double height = 0.0;
  // int _numConfetti = 5;
  int guestID = -1;
  bool waiting = false;
  RtcEngine? _rtcEngine;
  String appId = '9e6b469a2cae472ebc35ae0adbd449f4';
  @override
  void dispose() {
    // clear users
    _users.clear();
    // destroy sdk
    _rtcEngine!.leaveChannel();
    _rtcEngine!.destroy();
    super.dispose();
  }

  Timer? timer;
  void startTimer() {
    timer = Timer.periodic(Duration(seconds: 1), (timer) {
      countController.counterIncrease();
    });
  }

  @override
  void initState() {
    super.initState();
    // initialize agora sdk
    initialize();
    userMap = {widget.channelName: widget.image};
    _createClient();
    startTimer();
  }

  Future<void> initialize() async {
    await _initAgoraRtcEngine();
    _addAgoraEventHandlers();
    await _rtcEngine!.setParameters(
        '''{\"che.video.lowBitRateStreamParameter\":{\"width\":320,\"height\":180,\"frameRate\":15,\"bitRate\":140}}''');
    await _rtcEngine!.joinChannel(
      widget.channelToken,
      widget.channelName!,
      null,
      int.parse(PreferenceManager.getUserId()),
    );

    // await _rtcEngine!.muteAllRemoteAudioStreams(true);
    // await _rtcEngine!.disableAudio();
  }

  /// Create agora sdk instance and initialize
  Future<void> _initAgoraRtcEngine() async {
    _rtcEngine = await RtcEngine.create(appId);
    await _rtcEngine!.enableVideo();
    await _rtcEngine!.enableLocalAudio(true);
    if (widget.switchCamera == true) {
      _rtcEngine!.switchCamera();
    }
  }

  /// Add agora event handlers
  void _addAgoraEventHandlers() {
    _rtcEngine!.setEventHandler(RtcEngineEventHandler(
      error: (code) {
        setState(() {
          final info = 'onError: $code';
        });
      },
      joinChannelSuccess: (channel, uid, elapsed) {
        setState(() {
          final info = 'onJoinChannel: $channel, uid: $uid';

          print('JOIN CHANNEL SUCCESS $uid');
        });
      },
      // leaveChannel: (stats) {
      //   setState(() {
      //     _users.clear();
      //   });
      // },
      userJoined: (uid, elapsed) {
        setState(() {
          final info = 'userJoined: $uid';

          _users.add(uid);
          print('USER JOINED ${_users.length}');
        });
      },
      userOffline: (uid, elapsed) {
        setState(() {
          final info = 'userOffline: $uid';
          if (uid == guestID) {
            accepted = false;
          }
          _users.remove(uid);
        });
        log('LEAVE CHANNEL');
      },
      firstRemoteVideoFrame: (uid, width, height, elapsed) {
        // setState(() {
        print('joined7');
        final info = 'firstRemoteVideo: $uid ${width}x $height';
        // _infoStrings.add(elapsed);
        // });
        // setState(() {});
      },
      streamMessage: (_, __, message) {
        final String info = "here is the message $message";
        log('ERROR :- $message');
      },
      streamMessageError: (_, __, error, ___, ____) {
        final String info = "here is the error $error";
        log('ERROR :- $error');
      },
    ));
  }

  /// Helper function to get list of native views
  List<Widget> _getRenderViews() {
    List<StatefulWidget> list = [];
    list.add(RtcLocalView.SurfaceView());
    if (accepted == true) {
      list.add(RtcRemoteView.SurfaceView(
        uid: guestID,
        channelId: widget.channelName.toString(),
      ));
    }
    print('list >>> $list');
    return list;
  }

  /// Video view wrapper
  Widget _videoView(view) {
    return Expanded(child: ClipRRect(child: view));
  }

  /// Video view row wrapper
  Widget _expandedVideoRow(List<Widget> views) {
    final wrappedViews = views.map<Widget>(_videoView).toList();
    return Expanded(
      child: Row(
        children: wrappedViews,
      ),
    );
  }

  /// Video layout wrapper
  Widget _viewRows() {
    final views = _getRenderViews();

    switch (views.length) {
      case 1:
        return Container(
            child: Column(
          children: <Widget>[_videoView(views[0])],
        ));
      case 2:
        return Container(
          child: Column(
            children: <Widget>[
              _expandedVideoRow([views[0]]),
              _expandedVideoRow([views[1]])
            ],
          ),
        );
    }
    return Container();
  }

  void popUp() async {
    setState(() {
      heart = true;
    });

    _timer = Timer.periodic(Duration(milliseconds: 125), (Timer t) {
      setState(() {
        height += _random.nextInt(20);
      });
    });

    Timer(
        Duration(seconds: 4),
        () => {
              _timer!.cancel(),
              setState(() {
                heart = false;
              })
            });
  }

  /// Info panel to show logs
  Widget messageList() {
    return Container(
      padding: const EdgeInsets.fromLTRB(0, 0, 0, 10),
      alignment: Alignment.bottomCenter,
      child: FractionallySizedBox(
        heightFactor: 0.5,
        child: Container(
          padding: const EdgeInsets.symmetric(vertical: 48),
          child: ListView.builder(
            physics: BouncingScrollPhysics(),
            reverse: true,
            itemCount: _infoStrings.length,
            itemBuilder: (BuildContext context, int index) {
              if (_infoStrings.isEmpty) {
                return null!;
              }
              return Padding(
                padding: const EdgeInsets.symmetric(
                  vertical: 3,
                  horizontal: 10,
                ),
                child: (_infoStrings[index].type == 'join')
                    ? Padding(
                        padding: const EdgeInsets.only(bottom: 10),
                        child: Row(
                          mainAxisSize: MainAxisSize.max,
                          mainAxisAlignment: MainAxisAlignment.start,
                          children: <Widget>[
                            CachedNetworkImage(
                              imageUrl: _infoStrings[index].image!,
                              imageBuilder: (context, imageProvider) =>
                                  Container(
                                width: 32.0,
                                height: 32.0,
                                decoration: BoxDecoration(
                                  shape: BoxShape.circle,
                                  image: DecorationImage(
                                      image: imageProvider, fit: BoxFit.cover),
                                ),
                              ),
                            ),
                            Padding(
                              padding: const EdgeInsets.symmetric(
                                horizontal: 8,
                              ),
                              child: Text(
                                '${_infoStrings[index].user} joined',
                                style: TextStyle(
                                  color: Colors.white,
                                  fontSize: 14,
                                ),
                              ),
                            ),
                          ],
                        ),
                      )
                    : (_infoStrings[index].type == 'message')
                        ? Padding(
                            padding: const EdgeInsets.only(bottom: 10),
                            child: Row(
                              mainAxisSize: MainAxisSize.max,
                              mainAxisAlignment: MainAxisAlignment.start,
                              children: <Widget>[
                                ClipRRect(
                                  borderRadius: BorderRadius.circular(1000),
                                  child: ImageLoading(
                                      height: 40.h,
                                      width: 40.h,
                                      url: '${_infoStrings[index].image}'),
                                ),
                                Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: <Widget>[
                                    Padding(
                                      padding: const EdgeInsets.symmetric(
                                        horizontal: 8,
                                      ),
                                      child: Text(
                                        _infoStrings[index].user!,
                                        style: TextStyle(
                                          color: Colors.white,
                                          fontSize: 14,
                                          fontWeight: FontWeight.bold,
                                        ),
                                      ),
                                    ),
                                    SizedBox(
                                      height: 5,
                                    ),
                                    Padding(
                                      padding: const EdgeInsets.symmetric(
                                        horizontal: 8,
                                      ),
                                      child: _infoStrings[index]
                                              .message!
                                              .contains('https:')
                                          ? Row(
                                              children: [
                                                Image.network(
                                                  '${_infoStrings[index].message!.toString().split('.....').first}',
                                                  height: 70,
                                                  width: 70,
                                                ),
                                                Text(
                                                    ' * ${_infoStrings[index].message!.toString().split('.....').last}',
                                                    style: TextStyle(
                                                        color: Colors.white,
                                                        fontSize: 14))
                                              ],
                                            )
                                          : Text(
                                              _infoStrings[index].message!,
                                              style: TextStyle(
                                                  color: Colors.white,
                                                  fontSize: 14),
                                            ),
                                    ),
                                  ],
                                )
                              ],
                            ),
                          )
                        : null,
              );
            },
          ),
        ),
      ),
    );
  }

  void _onSwitchCamera() {
    _rtcEngine!.switchCamera();
  }

  Future<bool> _willPopCallback() async {
    if (personBool == true) {
      setState(() {
        personBool = false;
      });
    } else {
      setState(() {
        tryingToEnd = !tryingToEnd;
      });
    }
    return false; // return true if the route to be popped
  }

  Widget _liveText() {
    return Padding(
      padding: const EdgeInsets.all(15.0),
      child: Row(
        children: <Widget>[
          Container(
            height: 32.h,
            width: 53.w,
            decoration: BoxDecoration(
              color: Color(0xffE76944),
              borderRadius: BorderRadius.all(
                Radius.circular(4.0),
              ),
            ),
            child: Center(
              child: Text(
                'LIVE',
                style: TextStyle(
                    color: Colors.white,
                    fontSize: 15,
                    fontWeight: FontWeight.bold),
              ),
            ),
          ),
          Padding(
            padding: const EdgeInsets.only(left: 5, right: 10),
            child: Container(
              decoration: BoxDecoration(
                  color: Colors.black.withOpacity(.6),
                  borderRadius: BorderRadius.all(Radius.circular(4.0))),
              height: 28,
              alignment: Alignment.center,
              child: Padding(
                padding: const EdgeInsets.symmetric(horizontal: 8.0),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: <Widget>[
                    Icon(
                      Icons.remove_red_eye,
                      color: Colors.white,
                      size: 13,
                    ),
                    SizedBox(
                      width: 5,
                    ),
                    Text(
                      '$userNo',
                      style: TextStyle(color: Colors.white, fontSize: 11),
                    ),
                  ],
                ),
              ),
            ),
          ),
          SizedBox(
            width: 30.w,
          ),
          Obx(
            () => Text(
              '${countController.hour.value} : ${countController.min.value} : ${countController.count.value}',
              style: TextStyle(
                color: Colors.white,
                fontWeight: FontWeight.w500,
                fontSize: 18.sp,
              ),
            ),
          ),
          Spacer(),
          Padding(
            padding: const EdgeInsets.fromLTRB(15, 15, 15, 15),
            child: GestureDetector(
              onTap: () {
                if (personBool == true) {
                  setState(() {
                    personBool = false;
                  });
                }
                setState(() {
                  if (waiting == true) {
                    waiting = false;
                  }
                  tryingToEnd = true;
                });
              },
              child: Container(
                padding: EdgeInsets.fromLTRB(15, 6, 15, 6),
                decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.circular(12)),
                child: Text(
                  'END',
                  style: TextStyle(fontSize: 15),
                ),
              ),
            ),
          )
        ],
      ),
    );
  }

  Widget endLive() {
    return Container(
      color: Colors.black.withOpacity(0.5),
      child: Stack(
        children: <Widget>[
          Align(
            alignment: Alignment.center,
            child: Padding(
              padding: const EdgeInsets.all(30.0),
              child: Text(
                'Are you sure you want to end your live video?',
                textAlign: TextAlign.center,
                style: TextStyle(color: Colors.white, fontSize: 20),
              ),
            ),
          ),
          Container(
            alignment: Alignment.bottomCenter,
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceAround,
              children: <Widget>[
                Expanded(
                  child: Padding(
                    padding: const EdgeInsets.only(
                        left: 8.0, right: 4.0, top: 8.0, bottom: 8.0),
                    child: ElevatedButton(
                      style:
                          ElevatedButton.styleFrom(primary: Color(0xffE76944)),
                      child: Padding(
                        padding: const EdgeInsets.symmetric(vertical: 15),
                        child: Text(
                          'End Video',
                          style: TextStyle(color: Colors.white),
                        ),
                      ),
                      // elevation: 2.0,
                      // color: Color(0xffE76944),
                      onPressed: () async {
                        // await Wakelock.disable();

                        await stopLiveStreamViewModel.stopLiveStreamViewModel(
                          model: {
                            "user_id": PreferenceManager.getUserId(),
                          },
                        );

                        if (stopLiveStreamViewModel
                                .stopLiveStreamApiResponse.status ==
                            Status.COMPLETE) {
                          StopLiveStreamingResponseModel stopLive =
                              stopLiveStreamViewModel
                                  .stopLiveStreamApiResponse.data;
                          log('STOP LIVE');
                        }

                        _logout();
                        _leaveChannel();
                        _rtcEngine!.leaveChannel();
                        _rtcEngine!.destroy();
                        Navigator.pop(context);
                      },
                    ),
                  ),
                ),
                Expanded(
                  child: Padding(
                    padding: const EdgeInsets.only(
                        left: 4.0, right: 8.0, top: 8.0, bottom: 8.0),
                    child: ElevatedButton(
                      style: ElevatedButton.styleFrom(primary: Colors.grey),
                      child: Padding(
                        padding: const EdgeInsets.symmetric(vertical: 15),
                        child: Text(
                          'Cancel',
                          style: TextStyle(
                            color: Colors.white,
                          ),
                        ),
                      ),
                      // elevation: 2.0,
                      // color: Colors.grey,
                      onPressed: () {
                        setState(
                          () {
                            tryingToEnd = false;
                          },
                        );
                      },
                    ),
                  ),
                )
              ],
            ),
          )
        ],
      ),
    );
  }

  Widget personList() {
    return Container(
      alignment: Alignment.bottomRight,
      child: Container(
        height: 2 * MediaQuery.of(context).size.height / 3,
        width: MediaQuery.of(context).size.height,
        decoration: new BoxDecoration(
          color: Colors.grey[850],
          borderRadius: BorderRadius.only(
              topLeft: Radius.circular(25), topRight: Radius.circular(25)),
        ),
        child: Stack(
          children: <Widget>[
            Container(
              height: 2 * MediaQuery.of(context).size.height / 3 - 50,
              child: Column(
                children: <Widget>[
                  SizedBox(
                    height: 10,
                  ),
                  Container(
                    padding: EdgeInsets.symmetric(vertical: 12),
                    width: MediaQuery.of(context).size.width,
                    alignment: Alignment.center,
                    child: Text(
                      'Go Live with',
                      style: TextStyle(
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                          color: Colors.white),
                    ),
                  ),
                  SizedBox(
                    height: 10,
                  ),
                  Divider(
                    color: Colors.grey[800],
                    thickness: 0.5,
                    height: 0,
                  ),
                  Container(
                    padding: EdgeInsets.symmetric(vertical: 20, horizontal: 15),
                    width: double.infinity,
                    color: Colors.grey[900],
                    child: Text(
                      'When you go live with someone, anyone who can watch their live videos will be able to watch it too.',
                      textAlign: TextAlign.center,
                      style: TextStyle(
                        fontSize: 12,
                        color: Colors.grey[400],
                      ),
                    ),
                  ),
                  anyPerson == true
                      ? Container(
                          padding: EdgeInsets.symmetric(
                              vertical: 10, horizontal: 15),
                          width: double.maxFinite,
                          child: Text(
                            'INVITE',
                            style: TextStyle(
                                color: Colors.grey,
                                fontWeight: FontWeight.bold),
                            textAlign: TextAlign.start,
                          ))
                      : Padding(
                          padding: const EdgeInsets.only(top: 10),
                          child: Text(
                            'No Viewers',
                            style: TextStyle(color: Colors.grey[400]),
                          ),
                        ),
                  Expanded(
                    child: ListView(
                        shrinkWrap: true,
                        scrollDirection: Axis.vertical,
                        children: getUserStories()),
                  ),
                ],
              ),
            ),
            Align(
              alignment: Alignment.bottomCenter,
              child: GestureDetector(
                onTap: () {
                  setState(() {
                    personBool = !personBool;
                  });
                },
                child: Container(
                  color: Colors.grey[850],
                  alignment: Alignment.bottomCenter,
                  height: 50,
                  child: Stack(
                    children: <Widget>[
                      Container(
                        height: double.maxFinite,
                        alignment: Alignment.center,
                        child: Text(
                          'Cancel',
                          style: TextStyle(
                              fontWeight: FontWeight.bold, color: Colors.white),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  List<Widget> getUserStories() {
    List<Widget> stories = [];
    for (Users users in userList!) {
      stories.add(getStory(users));
    }
    return stories;
  }

  Widget getStory(Users users) {
    return Container(
      margin: EdgeInsets.symmetric(vertical: 7.5),
      child: Column(
        children: <Widget>[
          GestureDetector(
            onTap: () async {
              setState(() {
                waiting = true;
              });
              await _channel!.sendMessage(
                AgoraRtmMessage.fromText('d1a2v3i4s5h6 ${users.username}'),
              );
            },
            child: Container(
              padding: EdgeInsets.only(left: 15),
              color: Colors.grey[850],
              child: Row(
                children: <Widget>[
                  CachedNetworkImage(
                    imageUrl: users.image!,
                    imageBuilder: (context, imageProvider) => Container(
                      width: 40.0,
                      height: 40.0,
                      decoration: BoxDecoration(
                        shape: BoxShape.circle,
                        image: DecorationImage(
                          image: imageProvider,
                          fit: BoxFit.cover,
                        ),
                      ),
                    ),
                  ),
                  Padding(
                    padding: const EdgeInsets.only(left: 10),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: <Widget>[
                        Text(
                          users.username!,
                          style: TextStyle(fontSize: 18, color: Colors.white),
                        ),
                        SizedBox(
                          height: 2,
                        ),
                        Text(
                          users.name!,
                          style: TextStyle(color: Colors.grey),
                        ),
                      ],
                    ),
                  )
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget stopSharing() {
    return Container(
      height: MediaQuery.of(context).size.height / 2 + 40,
      alignment: Alignment.bottomRight,
      child: Padding(
        padding: const EdgeInsets.only(right: 10),
        child: MaterialButton(
          minWidth: 0,
          onPressed: () async {
            stopFunction();
            await _channel!
                .sendMessage(AgoraRtmMessage.fromText('E1m2I3l4i5E6 stoping'));
          },
          child: Icon(
            Icons.clear,
            color: Colors.white,
            size: 15.0,
          ),
          shape: CircleBorder(),
          elevation: 2.0,
          color: Colors.blue[400],
          padding: const EdgeInsets.all(5.0),
        ),
      ),
    );
  }

  Widget guestWaiting() {
    return Container(
      alignment: Alignment.bottomRight,
      child: Container(
        height: 100,
        width: double.maxFinite,
        alignment: Alignment.center,
        color: Colors.black,
        child: Wrap(
          children: <Widget>[
            Text(
              'Waiting for the user to accept...',
              style: TextStyle(color: Colors.white, fontSize: 20),
            )
          ],
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
        child: SafeArea(
          child: Scaffold(
            body: Container(
              color: Colors.black,
              child: Center(
                child: Stack(
                  alignment: Alignment.center,
                  children: <Widget>[
                    _viewRows(), // Video Widget

                    if (tryingToEnd == false)
                      Positioned(
                          top: 20, right: 0, left: 0, child: _liveText()),
                    if (tryingToEnd == false) _bottomBar(), // send message
                    if (tryingToEnd == false) messageList(),
                    if (tryingToEnd == true) endLive(), // view message
                    if (personBool == true && waiting == false) personList(),
                    if (accepted == true)
                      Positioned(top: 10, right: 10, child: stopSharing()),
                    if (waiting == true) guestWaiting(),
                    if (isStickerShow)
                      if (_infoStrings.isNotEmpty)
                        if (_infoStrings.first.message!.contains('https:'))
                          Image.network(
                            _infoStrings.first.message
                                .toString()
                                .split('.....')
                                .first,
                            height: 100,
                            width: 100,
                            fit: BoxFit.cover,
                          ),
                  ],
                ),
              ),
            ),
          ),
        ),
        onWillPop: _willPopCallback);
  }
// Agora RTM

  Widget _bottomBar() {
    if (!_isLogin || !_isInChannel) {
      return Container();
    }
    return Container(
      alignment: Alignment.bottomRight,
      child: Padding(
        padding: const EdgeInsets.only(left: 8, top: 5, right: 8, bottom: 5),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: <Widget>[
            Container(
              height: 48,
              width: MediaQuery.of(context).size.width * 0.6,
              decoration: ShapeDecoration(
                color: Colors.white24,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(40.0),
                  side: const BorderSide(
                    width: 1,
                    color: Colors.transparent,
                  ),
                ),
              ),
              child: TextField(
                keyboardType: TextInputType.text,
                style: TextStyle(color: Colors.white),
                controller: _channelMessageController,
                textInputAction: TextInputAction.send,
                textCapitalization: TextCapitalization.sentences,
                onSubmitted: _sendMessage,
                decoration: InputDecoration(
                  focusedBorder: OutlineInputBorder(
                    borderSide: BorderSide(color: Colors.grey),
                    borderRadius: BorderRadius.circular(40),
                  ),
                  floatingLabelStyle: TextStyle(color: Colors.white54),
                  border: OutlineInputBorder(
                    borderSide: BorderSide(
                      color: Colors.grey,
                      width: 1,
                    ),
                    borderRadius: BorderRadius.circular(40),
                  ),
                  hintText: "Type",
                  hintStyle: TextStyle(
                    color: Colors.grey,
                    fontSize: 16,
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ),
            ),
            // if (accepted == false)
            // _addPerson
            // _onSwitchCamera,
            Container(
              height: 48.h,
              width: 48.h,
              decoration: ShapeDecoration(
                color: Colors.black38,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(40.0),
                  side: const BorderSide(
                    width: 1,
                    color: Colors.transparent,
                  ),
                ),
              ),
              child: IconButton(
                onPressed: _addPerson,
                icon: Icon(
                  Icons.menu,
                  color: Colors.white,
                ),
              ),
            ),
            GestureDetector(
              onTap: () {
                _onSwitchCamera();
              },
              child: SvgPicture.asset(
                'images/camera.svg',
                height: 48.h,
                width: 48.w,
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _addPerson() {
    setState(() {
      personBool = !personBool;
    });
  }

  Future<void> stopFunction() async {
    setState(() {
      accepted = false;
    });
    log('MY IDS :- ${PreferenceManager.getUserId()}');
    log('OTHER IDS :- ${guestID}');
    await vsLiveViewModel.removeVSViewModel(model: {
      'from_id': '${PreferenceManager.getUserId()}',
      'to_id': '${guestID}',
    });
    if (vsLiveViewModel.removeVsApiResponse.status.toString() ==
        Status.COMPLETE.toString()) {
      log('USER REMOVED');
    }
  }

  void _logout() async {
    try {
      await _client!.logout();
      //_log(info:'Logout success.',type: 'logout');
    } catch (errorCode) {
      log('ERROR :- $errorCode');

      //_log(info: 'Logout error: ' + errorCode.toString(), type: 'error');
    }
  }

  void _leaveChannel() async {
    try {
      await _channel!.leave();
      //_log(info: 'Leave channel success.',type: 'leave');
      _client!.releaseChannel(_channel!.channelId!);
      _channelMessageController.text = '';
    } catch (errorCode) {
      log('ERROR :- $errorCode');
      // _log(info: 'Leave channel error: ' + errorCode.toString(),type: 'error');
    }
  }

  void _toggleSendChannelMessage() async {
    String text = _channelMessageController.text;
    if (text.isEmpty) {
      return;
    }
    try {
      _channelMessageController.clear();
      await _channel!.sendMessage(AgoraRtmMessage.fromText(text));
      _log(user: widget.channelName!, info: text, type: 'message');
    } catch (errorCode) {
      //_log(info: 'Send channel message error: ' + errorCode.toString(), type: 'error');
    }
  }

  void _sendMessage(text) async {
    if (text.isEmpty) {
      return;
    }
    try {
      _channelMessageController.clear();
      await _channel!.sendMessage(AgoraRtmMessage.fromText(text));
      _log(user: widget.channelName!, info: text, type: 'message');
    } catch (errorCode) {
      // _log('Send channel message error: ' + errorCode.toString());
    }
  }

  void _createClient() async {
    _client =
        await AgoraRtmClient.createInstance('b42ce8d86225475c9558e478f1ed4e8e');
    _client!.onMessageReceived = (AgoraRtmMessage message, String peerId) {
      _log(user: peerId, info: message.text, type: 'message');
    };
    _client!.onConnectionStateChanged = (int state, int reason) {
      log('state>>>>> $state,reason????? $reason');
      if (state == 5) {
        _client!.logout();
        //_log('Logout.');
        setState(() {
          _isLogin = false;
        });
      }
    };
    await _client!.login(null, widget.channelName!);
    _channel = await _createChannel(widget.channelName!);
    await _channel!.join();
  }

  Future<AgoraRtmChannel> _createChannel(String name) async {
    AgoraRtmChannel? channel = await _client!.createChannel(name);
    channel!.onMemberJoined = (AgoraRtmMember member) async {
      var img =
          'https://png.pngtree.com/png-clipart/20190520/original/pngtree-vector-users-icon-png-image_4144740.jpg';
      var nm = 'hello';
      setState(() {
        userList!.add(new Users(
          username: member.userId,
          name: nm,
          image: img,
        ));

        log('USER USER IDS :- ${member.userId}');
        if (userList!.length > 0) anyPerson = true;
      });
      userMap.putIfAbsent(member.userId, () => img);
      var len;
      _channel!.getMembers().then((value) {
        len = value.length;
        setState(() {
          userNo = len - 1;
        });
      });

      _log(info: 'Member joined: ', user: member.userId, type: 'join');
    };
    channel.onMemberLeft = (AgoraRtmMember member) {
      var len;
      setState(() {
        userList!.removeWhere((element) => element.username == member.userId);
        if (userList!.length == 0) anyPerson = false;
      });

      _channel!.getMembers().then((value) {
        len = value.length;
        setState(() {
          userNo = len - 1;
        });
      });
    };
    channel.onMessageReceived =
        (AgoraRtmMessage message, AgoraRtmMember member) {
      _log(user: member.userId, info: message.text, type: 'message');
    };
    return channel;
  }

  void _log({String? info, String? type, String? user}) {
    if (type == 'message' && info!.contains('m1x2y3z4p5t6l7k8')) {
      popUp();
    } else if (type == 'message' && info!.contains('k1r2i3s4t5i6e7')) {
      print('info>>>>>>>>>> $info');

      var a = info.split(' ');

      print('LogINID ${a.last}');
      setState(() {
        guestID = int.parse(a.last);

        accepted = true;
        personBool = false;
        personBool = false;
        waiting = false;
      });
    } else if (type == 'message' && info!.contains('E1m2I3l4i5E6')) {
      stopFunction();
      print('info...stop...$info');
    } else if (type == 'message' && info!.contains('R1e2j3e4c5t6i7o8n9e0d')) {
      setState(() {
        waiting = false;
      });
    } else {
      var image = userMap[user];
      Message m =
          new Message(message: info, type: type, user: user, image: image);
      setState(
        () {
          _infoStrings.insert(0, m);

          if (_infoStrings.isNotEmpty) {
            isStickerShow = true;

            Future.delayed(
              Duration(seconds: 2),
              () {
                setState(() {
                  isStickerShow = false;
                });
              },
            );
          }
        },
      );
    }
  }
}
